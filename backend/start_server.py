#!/usr/bin/env python3
"""
–ë–µ–∑–ø–µ—á–Ω–∏–π –∑–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è–º –ø–æ—Ä—Ç—É
"""

import os
import sys
import time
import socket
import subprocess
import psutil
from pathlib import Path

def check_port_in_use(port):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–π–Ω—è—Ç–∏–π –ø–æ—Ä—Ç"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        try:
            s.bind(('127.0.0.1', port))
            return False
        except OSError:
            return True

def find_process_using_port(port):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å–∏, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ø–æ—Ä—Ç"""
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'connections']):
        try:
            for conn in proc.info['connections'] or []:
                if conn.laddr.port == port:
                    processes.append(proc.info)
                    break
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return processes

def kill_processes_on_port(port):
    """–í–±–∏–≤–∞—î –ø—Ä–æ—Ü–µ—Å–∏ –Ω–∞ –≤–∫–∞–∑–∞–Ω–æ–º—É –ø–æ—Ä—Ç—É"""
    processes = find_process_using_port(port)
    
    if not processes:
        print(f"‚úÖ –ü–æ—Ä—Ç {port} –≤—ñ–ª—å–Ω–∏–π")
        return True
    
    print(f"‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ {len(processes)} –ø—Ä–æ—Ü–µ—Å(—ñ–≤) –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    for proc_info in processes:
        try:
            pid = proc_info['pid']
            name = proc_info['name']
            print(f"  –í–±–∏–≤–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å: {name} (PID: {pid})")
            
            proc = psutil.Process(pid)
            proc.terminate()
            
            # –ß–µ–∫–∞—î–º–æ –¥–æ 3 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            try:
                proc.wait(timeout=3)
            except psutil.TimeoutExpired:
                print(f"  –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É {pid}")
                proc.kill()
                
        except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
            print(f"  ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å {pid}: {e}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ä—Ç –∑–≤—ñ–ª—å–Ω–∏–≤—Å—è
    time.sleep(1)
    if check_port_in_use(port):
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –ø–æ—Ä—Ç {port}")
        return False
    else:
        print(f"‚úÖ –ü–æ—Ä—Ç {port} –∑–≤—ñ–ª—å–Ω–µ–Ω–æ")
        return True

def start_uvicorn():
    """–ó–∞–ø—É—Å–∫–∞—î uvicorn —Å–µ—Ä–≤–µ—Ä"""
    PORT = 8001
    
    print("=" * 50)
    print("  –ë–ï–ó–ü–ï–ß–ù–ò–ô –ó–ê–ü–£–°–ö BACKEND –°–ï–†–í–ï–†–ê")
    print("=" * 50)
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    if not Path("app/main.py").exists():
        print("‚ùå –§–∞–π–ª app/main.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        print(f"–ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.getcwd()}")
        print("–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó backend")
        return 1
    
    print("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ app/main.py")
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –∑–≤—ñ–ª—å–Ω—è—î–º–æ –ø–æ—Ä—Ç
    print(f"1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ä—Ç {PORT}...")
    if not kill_processes_on_port(PORT):
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –ø–æ—Ä—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–ø'—é—Ç–µ—Ä.")
        return 1
    
    print()
    print(f"2. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
    print(f"Backend –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞: http://127.0.0.1:{PORT}")
    print(f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API: http://127.0.0.1:{PORT}/docs")
    print()
    print("–î–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ uvicorn
        cmd = [sys.executable, "-m", "uvicorn", "app.main:app", "--reload", "--port", str(PORT)]
        subprocess.run(cmd)
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(start_uvicorn())