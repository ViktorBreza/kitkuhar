
services:
  # Production PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: kitkuhar-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kitkuhar}
      POSTGRES_USER: ${POSTGRES_USER:-kitkuhar_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/backups:/backups
    networks:
      - kitkuhar-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kitkuhar_user} -d ${POSTGRES_DB:-kitkuhar}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: kitkuhar-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - kitkuhar-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Backend (FastAPI)
  backend:
    build: 
      context: .
      dockerfile: backend/Dockerfile
    container_name: kitkuhar-backend-prod
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-kitkuhar_user}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB:-kitkuhar}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      # Admin user creation (optional)
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    volumes:
      - media_files_prod:/app/media
      - app_logs_prod:/app/logs
      - ./database/backups:/backups:ro
    networks:
      - kitkuhar-prod-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Production Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=/api
        - NEXT_PUBLIC_API_BASE_URL=http://backend:8000
        - NODE_ENV=production
    container_name: kitkuhar-frontend-prod
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://backend:8000
    networks:
      - kitkuhar-prod-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: kitkuhar-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - media_files_prod:/var/www/media:ro
      - nginx_logs_prod:/var/log/nginx
    networks:
      - kitkuhar-prod-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  media_files_prod:
    driver: local
  app_logs_prod:
    driver: local
  nginx_logs_prod:
    driver: local

networks:
  kitkuhar-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16